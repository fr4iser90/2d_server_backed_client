To achieve the goals you've outlined—loading scenes based on player locations, managing active and inactive NPCs and entities, enabling players to see each other, and handling instances of scenes like cities—you'll need a combination of core systems and modules on the server. Here's a breakdown of what you need and how you can structure it:
1. Core Systems
1.1. Scene Management Core

    Purpose: Handles the loading, unloading, and management of game scenes on the server. This includes loading the correct scene based on the player's location, managing which parts of the scene are active, and handling dynamic content.
    Responsibilities:
        Scene Loading/Unloading: Load scenes when players enter them and unload them when no players are present.
        Active/Inactive Management: Dynamically activate or deactivate parts of a scene (e.g., NPCs, enemies) based on proximity or player activity to save server resources.
        Instance Management: Manage multiple instances of the same scene (e.g., cities) to limit the number of players per instance and create new instances as needed.
    Structure:
        SceneManager.gd: Main script to handle scene loading/unloading.
        InstanceManager.gd: Manages multiple instances of the same scene.
        SceneData.gd: Handles data specific to scenes, such as active entities, players in the scene, etc.

1.2. Player Management Core

    Purpose: Manages player data, including their current location, stats, inventory, and scene information. This core will interface with the Scene Management Core to ensure players are correctly loaded into the appropriate scenes.
    Responsibilities:
        Player Data Management: Handle saving/loading player data.
        Scene Assignment: Determine which scene and instance a player should be in.
        Player Synchronization: Keep player states synchronized across clients (position, health, inventory, etc.).
    Structure:
        PlayerManager.gd: Main script to manage player data and scene assignment.
        PlayerData.gd: Handles the specifics of player data (e.g., position, inventory).

1.3. Networking Core

    Purpose: Manages communication between the server and clients, ensuring that data is transmitted efficiently and securely.
    Responsibilities:
        Connection Management: Handle player connections, disconnections, and reconnections.
        Data Transmission: Send and receive data related to player actions, scene changes, etc.
        Security: Ensure that all data is validated and that no unauthorized actions are taken by clients.
    Structure:
        NetworkManager.gd: Main script to manage network connections and data transmission.
        PacketHandler.gd: Handles the specific types of data packets being sent and received.

2. Modules
2.1. Player Visibility Module

    Purpose: Allows players to see and interact with other players in the same scene or instance.
    Responsibilities:
        Proximity Detection: Determine which players are close enough to see each other.
        State Synchronization: Synchronize player states (position, animations) across clients.
        Interaction Management: Handle interactions between players, such as chatting or trading.
    Structure:
        VisibilityManager.gd: Manages which players are visible to each other.
        InteractionHandler.gd: Handles player interactions within the visible range.

2.2. NPC and Entity Management Module

    Purpose: Manages the non-player characters (NPCs) and other entities within scenes, ensuring they are loaded, updated, and synchronized with the players.
    Responsibilities:
        NPC Activation/Deactivation: Dynamically manage which NPCs are active based on player proximity.
        Entity Synchronization: Ensure that NPCs and other entities (like monsters or interactive objects) are synchronized across all players in a scene.
        AI and Behavior Management: Handle the logic for NPC behavior and interactions.
    Structure:
        EntityManager.gd: Main script to manage NPCs and entities.
        AIManager.gd: Handles the AI and behavior of NPCs.

2.3. Instance Management Module

    Purpose: Manage the creation and deletion of scene instances (like cities or dungeons), ensuring that player limits are enforced and that new instances are created as needed.
    Responsibilities:
        Instance Creation: Create new instances of scenes when existing ones reach their player limit.
        Instance Assignment: Assign players to the correct instance based on their location and availability.
        Instance Cleanup: Unload or recycle instances that are no longer in use.
    Structure:
        InstanceManager.gd: Manages the lifecycle of scene instances.
        LoadBalancer.gd: Balances the load across different instances to prevent overcrowding.

3. Workflow Example

    Player Logs In:
        PlayerManager loads the player’s data and determines the correct scene and instance they should be in.
        SceneManager loads the necessary scene and spawns the player.
        InstanceManager assigns the player to the correct instance of the scene.

    Player Enters a New Area (Scene Transition):
        SceneManager unloads the current scene and loads the new scene.
        PlayerManager updates the player's location and ensures they are placed in the correct instance.
        EntityManager activates the relevant NPCs and entities in the new scene.

    Player Interacts with Another Player:
        VisibilityManager ensures both players can see each other.
        InteractionHandler manages the interaction, such as trading or combat.

    Instance Management:
        When a scene instance (e.g., a city) reaches its player limit, InstanceManager creates a new instance and assigns additional players to it.

4. Additional Considerations

    Database Integration: Ensure that player data, scene states, and other persistent data are correctly stored and retrieved from your database.
    Modular Design: Keep each module independent and easily interchangeable or expandable. For example, you can add more complex AI or expand the visibility range management later.
    Performance Optimization: Use efficient data structures and algorithms, especially for NPC management and player visibility, to ensure the server can handle multiple players without lag.

Next Steps:

    Start by Implementing the Core Systems:
        Begin with the Scene Management Core and Player Management Core, as these are foundational to how your server will operate.

    Add Modules Incrementally:
        Implement the Player Visibility Module and NPC and Entity Management Module after you have the core systems in place.

    Test Instancing Early:
        Test the Instance Management Module to ensure that it scales well and handles multiple players per instance efficiently.

By following this structure, you can build a modular and scalable server architecture that will handle the complexity of scene management, player visibility, and instancing in your game.

