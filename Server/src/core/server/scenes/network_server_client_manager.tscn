[gd_scene load_steps=15 format=3 uid="uid://cudxxv1ij0nt2"]

[ext_resource type="Script" path="res://src/core/network/server_client/manager/network_server_client_manager.gd" id="1_0mitk"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/heartbeat_handler.gd" id="4_0eoj5"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/connection_handler.gd" id="5_113g2"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/disconnection_handler.gd" id="6_lvofy"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/scene_data_handler.gd" id="7_gnmyg"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/chat_messages_handler.gd" id="8_o2d7c"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/status_update_handler.gd" id="9_a0a4l"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/event_triggered_handler.gd" id="10_uwg5v"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/special_action_handler.gd" id="11_3loqj"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/self_test_channels.gd" id="12_x2f41"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/player_movement_sync_handler.gd" id="13_bewvu"]
[ext_resource type="Script" path="res://src/core/network/handler/packet_handlers/player_movement_handler.gd" id="13_rymdf"]
[ext_resource type="Script" path="res://src/core/network/server_client/manager/game_connection_manager.gd" id="15_73o3r"]

[sub_resource type="GDScript" id="GDScript_vtg52"]
script/source = "# res://src/core/player/player_movement.gd (Server)
extends Node

signal player_position_updated(peer_id: int, new_position: Vector2)

var enet_server_manager
var player_positions = {}

var is_initialized = false

func initialize():
	if is_initialized:
		print(\"PlayerMovement already initialized. Skipping.\")
		return
	enet_server_manager = GlobalManager.GlobalNodeManager.get_node_from_config(\"network_manager\", \"enet_server_manager\")
	is_initialized = true

# Processes incoming data from the client (position and velocity)
func process_received_data(peer_id: int, packet: PackedByteArray):
	var message = packet.get_string_from_utf8()
	print(\"Received packet from peer_id \", peer_id, \": \", message)
	
	var json = JSON.new()
	var parse_result = json.parse(message)
	
	if parse_result == OK:
		var movement_data = json.get_data()
		if typeof(movement_data) == TYPE_DICTIONARY and movement_data.has(\"position\") and movement_data.has(\"velocity\"):
			var position = movement_data[\"position\"]
			var velocity = movement_data[\"velocity\"]
			
			if position != Vector2.ZERO and velocity != Vector2.ZERO:
				process_movement_data(peer_id, {
					\"position\": position,
					\"velocity\": velocity
				})
			else:
				print(\"Invalid position or velocity for peer_id \", peer_id)
		else:
			print(\"Invalid movement data format from peer_id \", peer_id)
	else:
		print(\"Failed to parse JSON data from client: \", peer_id, \", Error: \", parse_result)

# Processes movement data and updates player positions
func process_movement_data(peer_id: int, movement_data: Dictionary):
	var new_position = movement_data.get(\"position\", Vector2())
	var velocity = movement_data.get(\"velocity\", Vector2())
	
	if new_position != Vector2.ZERO and velocity != Vector2.ZERO:
		if is_valid_movement(peer_id, new_position, velocity):
			player_positions[peer_id] = new_position
			emit_signal(\"player_position_updated\", peer_id, new_position)
			# Sync movement with all clients
			sync_movement_with_clients(peer_id, new_position, velocity)
		else:
			print(\"Invalid movement detected for peer: \", peer_id)
	else:
		print(\"Failed to parse movement data for peer: \", peer_id)

# Validation logic for movement
func is_valid_movement(peer_id: int, new_position: Vector2, velocity: Vector2) -> bool:
	# Add validation logic here, such as checking for collisions, boundaries, etc.
	return true

# Synchronize movement with all clients
func sync_movement_with_clients(peer_id: int, position: Vector2, velocity: Vector2):
	var movement_data = {
		\"peer_id\": peer_id,
		\"position\": position,
		\"velocity\": velocity
	}
	
	var json = JSON.new()
	var json_string = json.stringify(movement_data)
	
	if json_string == \"\":
		print(\"Failed to serialize movement data for peer: \", peer_id)
		return
	
	var packet = json_string.to_utf8_buffer()
	
	if multiplayer.multiplayer_peer:
		for other_peer_id in multiplayer.get_peers():
			if other_peer_id != peer_id:
				var result = multiplayer.send_bytes(packet, 3, other_peer_id)
				if result:
					print(\"Movement data sent successfully to peer: \", other_peer_id)
				else:
					print(\"Failed to send movement data to peer: \", other_peer_id)
	else:
		print(\"Multiplayer peer is not initialized.\")

# Handle removing player on disconnect
func remove_player(peer_id: int):
	player_positions.erase(peer_id)
	print(\"Player removed from movement tracking: \", peer_id)

# Utility function to retrieve all player data
func get_all_players_data() -> Dictionary:
	var data = {}
	for peer_id in player_positions.keys():
		data[peer_id] = player_positions[peer_id]
	return data
"

[node name="NetworkServerClientManager" type="Node"]
script = ExtResource("1_0mitk")

[node name="Manager" type="Node" parent="."]

[node name="GameConnectionManager" type="Node" parent="Manager"]
script = ExtResource("15_73o3r")

[node name="PlayerMovementManager" type="Node" parent="Manager"]
script = SubResource("GDScript_vtg52")

[node name="Handler" type="Node" parent="."]

[node name="ClientServerHandler" type="Node" parent="Handler"]

[node name="HeartbeatHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("4_0eoj5")

[node name="ConnectionHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("5_113g2")

[node name="DisconnectionHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("6_lvofy")

[node name="DataHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("7_gnmyg")

[node name="ChatMessageHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("8_o2d7c")

[node name="PlayerStatusUpdateHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("9_a0a4l")

[node name="EventTriggeredHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("10_uwg5v")

[node name="SpecialActionHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("11_3loqj")

[node name="SelfTestChannelsHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("12_x2f41")

[node name="PlayerMovementHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("13_rymdf")

[node name="PlayerMovementSyncHandler" type="Node" parent="Handler/ClientServerHandler"]
script = ExtResource("13_bewvu")
